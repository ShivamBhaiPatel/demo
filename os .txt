Day-1
===========

[lavish@localhost ~]$
<username@hostname>
$ --> regular or super user is in action
# --> root user is in action

[root@localhost ~]# 
<username@hostname>

Root 'user' is main user is linux with user id '0'. It has all the permissions possible.

Kind of users in Linux
 - Root user
 - Super user - Sudoers - they need 'sudo' as a prefix for running/executing the commands
 - Regular users - userid starting from 1000

Adding users
------------
[root@localhost ~]# useradd jerry <to add the user named jerry>
[root@localhost ~]# passwd jerry <to assign the password to user jerry>

Ques: Who can change the password for 'jerry'?
Root user & Jerry

When root changes the password
[root@localhost ~]# passwd jerry
Changing password for user jerry.
New password: 
BAD PASSWORD: The password is shorter than 8 characters
Retype new password: 
passwd: all authentication tokens updated successfully.
---------
When Jerry wants to chnage the password
[root@localhost ~]# su - jerry
[jerry@localhost ~]$ passwd
Changing password for user jerry.
Changing password for jerry.
(current) UNIX password: 
New password: 
Retype new password: 
passwd: all authentication tokens updated successfully.

Switching of users
------------------
Note: Root creates the users
 - When we switch from root to any other user - no password will be asked.
 - When we switch from anyother user to root/anyotheruser - then password is asked.

Deleting of user
----------------
userdel -r <username>

User information file '/etc/passwd'
-----------------------------------
How to see this on linux --> cat /etc/passwd
<Sample entry> - lavish:x:1000:1000:lavish:/home/lavish:/bin/bash
It has 7 fields
1- username
2- x (Link to the password file - /etc/shadow)
3- userid
4- groupid
5- comment (not imp)
6- home directory(created when user is created)
7- Shell being used by the user

What is x?
----------
User has the password but no link to the password as seen below:

[root@localhost ~]# cat /etc/passwd | grep 'pratiksha'
pratiksha::1004:1004::/home/pratiksha:/bin/bash
[root@localhost ~]# cat /etc/shadow | grep 'pratiksha'
pratiksha:$6$jKDgViVU$JYMChAtNhkFUtUkdwAkmnC9vJYfn11Jzc1Xw3YQualXhe/zPCC6yIGb50wbtVkg2g623iPVM3Cd43I1U.dtYX1:18753:0:99999:7:::

[root@localhost ~]# su - tom
Last login: Thu May  6 18:18:47 IST 2021 on pts/0
[tom@localhost ~]$ su - pratiksha
[pratiksha@localhost ~]$ 

Conclusion: If x is not present --> any user can login as other user without supplying password.

Adding user with userid
-----------------------
[root@localhost ~]# useradd -u 1001 pratik

Can a user have different userid than group id - Yes
-----------------------------------------------------
[root@localhost ~]# usermod -g 1004 pratik
[root@localhost ~]# cat /etc/passwd | grep pratik
pratiksha::1004:1004::/home/pratiksha:/bin/bash
pratik:x:1001:1004::/home/pratik:/bin/bash

What can be the limit of userids and groupd ids in centos 7
------------------------------------------------------------
cat /etc/login.defs

UID_MIN                  1000
UID_MAX                 60000
GID_MIN                  1000
GID_MAX                 60000

Location where all executable binaries are present
--------------------------------------------------
[root@localhost ~]# man usermod
[root@localhost ~]# echo $PATH ---> Environment Variable
[root@localhost ~]# echo $PATH
/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin
[root@localhost ~]# cd /sbin
[root@localhost sbin]# ls



============================================
 Lab Day-1
=======================================


Day 1_Lab
---------

How to create a directory
-------------------------
[root@localhost ~]# mkdir edac_maybatch

How to see the files/dir 
------------------------
[root@localhost ~]# ls

Now, the MOST IMP thing in linux is to know where you are currently
-------------------------------------------------------------------
[root@localhost ~]# pwd
/root

To change the location (cd)
---------------------------
[root@localhost ~]# cd edac_maybatch/
[root@localhost edac_maybatch]# pwd
/root/edac_maybatch

Create files in the folder
---------------------------
Touch - blank files

[root@localhost edac_maybatch]# touch file1
[root@localhost edac_maybatch]# touch file2
[root@localhost edac_maybatch]# ls
file1  file2

Pattern to create multiple files
--------------------------------
[root@localhost edac_maybatch]# touch file{3..30}
[root@localhost edac_maybatch]# ls
file1   file12  file15  file18  file20  file23  file26  file29  file4  file7
file10  file13  file16  file19  file21  file24  file27  file3   file5  file8
file11  file14  file17  file2   file22  file25  file28  file30  file6  file

writing content into file via 'vi' editor
-----------------------------------------
[root@localhost edac_maybatch]# vi file31
Press <I>
Type your content
Press Esc
:wq!
[root@localhost edac_maybatch]# cat file31
This is my file content written via 'vi' editor

Echo content into the file
--------------------------
[root@localhost edac_maybatch]# echo "Hello" > file32
[root@localhost edac_maybatch]# cat file32
Hello
[root@localhost edac_maybatch]# echo "World" > file32
[root@localhost edac_maybatch]# cat file32
World
[root@localhost edac_maybatch]# echo "Hello" >> file32
[root@localhost edac_maybatch]# cat file32
World
Hello

[Harshit] - We did not see the file extensions - is that ok?
------------------------------------------------------------
In Linux, file extensions do not matter at all
In Windows, file extensions must be there

Copying files in Linux
----------------------
cp <source full path> <destination full path>

[root@localhost edac_maybatch]# cp /root/edac_maybatch/file1 /root/edac_maybatch/dir1
[root@localhost edac_maybatch]# ls /root/edac_maybatch/dir1
file1
[root@localhost edac_maybatch]# cp file2 dir2
[root@localhost edac_maybatch]# ls dir2
file2

Moving(cut-paste)
-----------------
[root@localhost edac_maybatch]# mv /root/edac_maybatch/file10 /root/edac_maybatch/dir10
[root@localhost edac_maybatch]# ls
dir1   dir2  dir4  dir6  dir8  file1  file3  file5  file7  file9
dir10  dir3  dir5  dir7  dir9  file2  file4  file6  file8  firstscript
[root@localhost edac_maybatch]# ls dir10
file10

Move(Rename)
------------
[root@localhost edac_maybatch]# touch edac
[root@localhost edac_maybatch]# ls
edac
[root@localhost edac_maybatch]# mv edac cdac
[root@localhost edac_maybatch]# ls
cdac

Create hidden files and see it
------------------------------
[root@localhost edac_maybatch]# touch .edac
[root@localhost edac_maybatch]# ls
cdac
[root@localhost edac_maybatch]# ls -a
.  ..  cdac  .edac

Meaning of . and ..
-------------------
.	--> current location
..	--> just one location back (previous location)

[root@localhost edac_maybatch]# ls -a
.  ..  cdac  .edac
[root@localhost edac_maybatch]# cd .
[root@localhost edac_maybatch]# pwd
/root/edac_maybatch
[root@localhost edac_maybatch]# cd ..
[root@localhost ~]# pwd
/root

Script
------
[root@localhost edac_maybatch]# cat firstscript 
#!/bin/bash

# Script to create 10 directories named as dir1-dir10 and 10 files named as file1-file10

mkdir dir{1..10}
touch file{1..10}

Assignment Q 1 - Continue this script to copy file1 to dir1 and so on... till file10 to dir10

Naming convention to submit - Name_<Last four digits of PRN>

Meaning of '-' while switching users
------------------------------------
If we don't use '-' user lands in the home of previous user itself.

Usecase Based Ques
------------------
Being root user - Create 2 users
nishit
sourabh

and...

nishit craetes a file named as 'file_n' in his home dir
sourabh creates a file named as 'file_s' in his home dir

nishit wants to write content in file_s - will it be allowed? No
sourabh wants to delete file_n - will it be allowed? No

Alias
-----
[root@localhost ~]# alias lavish='mkdir edac_maybatch;cd edac_maybatch;touch file{1..10}'
[root@localhost ~]# lavish



===========================================================================
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Day- @
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
===========================================================================


Hierarchy in Linux (File Structure)
-----------------------------------
/ - Parent of directory structure in Linux
--
[root@localhost /]# ls
bin   dev  home  lib64  mnt  proc  run   srv  tmp  var
boot  etc  lib   media  opt  root  sbin  sys  usr

Assignment Q - What does this each location contains - One liner
--

Permission set of File in Linux
-------------------------------
r	read	4
w	write	2
x	execute	1

Full Permission -> rwx	7

Distribution of users in Linux
------------------------------
Owner - who creates the file
Group - group which owner belongs to
Others - all the users in Linux except for owner

If I login as 'vipin' and create a file

vipin 7
vipin (grp) 5
sonakshi 4

[vipin@localhost ~]$ ls -l file1
-rw-rw-r--. 1 vipin vipin 0 May  7 11:35 file1

- > regular file

How to see numeric permissions
------------------------------
[vipin@localhost ~]$ stat -c '%a' file1
664

To change the permission 'chmod'
--------------------------------
chmod 755 <filename>
chmod -R 755 <dirname>

Usecase
Step1 - Permissions denied
[sonakshi@localhost ~]$ cd /home/vipin
-bash: cd: /home/vipin: Permission denied

Step2 - Why denied - because 0 permission for other
[root@localhost home]# ls -l
total 4
drwx------. 15 lavish   lavish   4096 May  6 17:29 lavish
drwx------.  5 sonakshi sonakshi  107 May  7 11:46 sonakshi
drwx------.  6 vipin    vipin     135 May  7 11:41 vipin

Step3 - Logged in as root and chnaged permission
[root@localhost home]# chmod 707 vipin
[root@localhost home]# ls -l
total 4
drwx------. 15 lavish   lavish   4096 May  6 17:29 lavish
drwx------.  5 sonakshi sonakshi  107 May  7 11:46 sonakshi
drwx---rwx.  6 vipin    vipin     135 May  7 11:41 vipin

Step4 - Again performed Step1 and it worked
[root@localhost home]# su - sonakshi
Last login: Fri May  7 11:46:07 IST 2021 on pts/0
[sonakshi@localhost ~]$ cd /home/vipin
[sonakshi@localhost vipin]$ pwd
/home/vipin

[Hitendra] - can we givepermissions to a specific user
------------------------------------------------------
ACL - setfacl
setfacl -m u:<username>:rwx filename

Adding permissions alphabetically
---------------------------------
Scenario 2
----------

Before
[root@localhost edac]# ls -l
total 0
-rw-r--r--. 1 root root 0 May  7 12:24 file_x
-rw-r--r--. 1 root root 0 May  7 12:24 file_y

After
[root@localhost edac]# chmod o+wx file_x
[root@localhost edac]# ls -l
total 0
-rw-r--rwx. 1 root root 0 May  7 12:24 file_x
-rw-r--r--. 1 root root 0 May  7 12:24 file_y

Scenario 2
----------
Before
[root@localhost edac]# ls -l
total 0
-rw-r--rwx. 1 root root 0 May  7 12:24 file_x
-rw-r--r--. 1 root root 0 May  7 12:24 file_y

After
[root@localhost edac]# chmod o+w,u+x file_y
[root@localhost edac]# ls -l
total 0
-rw-r--rwx. 1 root root 0 May  7 12:24 file_x
-rwxr--rw-. 1 root root 0 May  7 12:24 file_y

Umask
-----
It decides the default permissions

For dir - without mask permission is 777
For file - without umask permission 666

How umask decides the permissions

If umask is 022 - then umask will be subtracted from the permission set
and what you get later is the default permission

[root@localhost edac]# umask
0022
[root@localhost edac]# ls -l
total 0
-rw-r--r--. 1 root root 0 May  7 12:42 test
drwxr-xr-x. 2 root root 6 May  7 12:42 testdir

Assignment Q2 - How to set umask - temp & permanent?

Sudoers
-------
More privilges than regular users - can also be equivalent to 'root'

Before
--
[root@localhost edac]# su - sonakshi
Last login: Fri May  7 12:08:37 IST 2021 on pts/0
[sonakshi@localhost ~]$ useradd pratik
useradd: Permission denied.
useradd: cannot lock /etc/passwd; try again later.
[sonakshi@localhost ~]$ su - root
Password: 
Last login: Fri May  7 12:13:21 IST 2021 on pts/0
--
After

[root@localhost ~]# vi /etc/sudoers -- Added sonakshi as superuser
[root@localhost ~]# su - sonakshi
Last login: Fri May  7 12:52:24 IST 2021 on pts/0
[sonakshi@localhost ~]$ useradd pratik
useradd: Permission denied.
useradd: cannot lock /etc/passwd; try again later.
[sonakshi@localhost ~]$ sudo useradd pratik

We trust you have received the usual lecture from the local System
Administrator. It usually boils down to these three things:

    #1) Respect the privacy of others.
    #2) Think before you type.
    #3) With great power comes great responsibility.

[sudo] password for sonakshi: 
[sonakshi@localhost ~]$ cat /etc/passwd | grep pratik
pratik:x:1003:1003::/home/pratik:/bin/bash

Meaning of ALL=(ALL) ALL
------------------------
ALL= – on all hosts (if you distribute the same sudoers file to many computers)
(ALL) – as any target user
ALL – can run any command

Assignment Q3
-------------
Creata a user 'user1' 
Login as that user and create two directories 'dir1' and 'dir2'
Create 100 files in dir1 and 100 files in dir2
Copy all files of dir1 to dir2
Move all files of dir2 to dir1

Result: Your dir2 should be empty now

- What is the permission of the directory right now?
- add 2 files in the directory - what is the permission of these two files? Is it same as that of dir2
- Run the command chmod -R 777 dir2
- Create two new files named 'testfile1' & 'testfile2' and observe the  permission of these two files? Is it same as that of dir2


================================================
Lab Day- 2
-----------------

Going One Step back use --> cd ..
---------------------------------
[vipin@localhost testdir]$ pwd
/home/vipin/testdir
[vipin@localhost testdir]$ cd ..
[vipin@localhost ~]$ pwd
/home/vipin

Creating multiple files
-----------------------
[vipin@localhost testdir]$ touch myfile file file_x file_y
[vipin@localhost testdir]$ ls
file  file_x  file_y  myfile

Basic Commands in Linux
-----------------------
1. pwd command
[root@localhost edac]# pwd
/root/edac

2. cd command
[root@localhost edac]# cd ..
[root@localhost ~]# pwd
/root
[root@localhost ~]# cd /etc
[root@localhost etc]# pwd
/etc
[root@localhost etc]# cd ~
[root@localhost ~]# pwd
/root


3. ls command

[root@localhost edac]# ls
[user@host presentlocation]# ls
Here ls will give you the list of file/dir present under the current location

E.g
[root@localhost edac]# ls
file1  file2  file3  file4  file5


4. cat command
Display content of the file
[root@localhost edac]# cat file1
Hello



5. cp command
Used to Copy the files from source to destination

[root@localhost yum.repos.d]# pwd
/etc/yum.repos.d
[root@localhost yum.repos.d]# ls
CentOS-Base.repo       CentOS-fasttrack.repo  CentOS-Vault.repo
CentOS-CR.repo         CentOS-Media.repo      CentOS-x86_64-kernel.repo
CentOS-Debuginfo.repo  CentOS-Sources.repo    lavish.repo
[root@localhost yum.repos.d]# 

Ques - I want to copy all .repo files in test2 folder under edac but NOT lavish.repo
[root@localhost yum.repos.d]# cp CentOS*.repo /root/edac/test2
[root@localhost yum.repos.d]# ls
CentOS-Base.repo       CentOS-fasttrack.repo  CentOS-Vault.repo
CentOS-CR.repo         CentOS-Media.repo      CentOS-x86_64-kernel.repo
CentOS-Debuginfo.repo  CentOS-Sources.repo    lavish.repo

[ashwini]- https://wiki.linuxquestions.org/wiki/List_of_file_extensions

6. mv command

7. mkdir command - To make folders

8. rmdir command - remove a directory
[root@localhost edac]# ls
test1  test2
[root@localhost edac]# rmdir test1
rmdir: failed to remove ‘test1’: Directory not empty
[root@localhost edac]# rm -rf test1
[root@localhost edac]# ls
test2

9. rm command

10. touch command - used to create blank files

11. locate command - The locate command is used to find files by their filename

12. find command
find /etc -name 'lavish.repo'

Q - Find all the files which are more than 10Kb in size 

13. grep command
grep is used to fetch the line in a file using a particular pattern

Content of testfile
-------------------
I like Mangoes
Linux is not good at all
Its a very BUSY day
Weekends are NoT fun anymore
My phone number is 9818616136
Lab is going to end at 8:30

[root@localhost test1]# cat testfile | grep "mango"
[root@localhost test1]# cat testfile | grep "Mango"
I like Mangoes
[root@localhost test1]# cat testfile | grep -i "mango"
I like Mangoes
[root@localhost test1]# cat testfile | grep -i "not"
Linux is not good at all
Weekends are NoT fun anymore
[root@localhost test1]# cat testfile | grep  "not"
Linux is not good at all
[root@localhost test1]# cat testfile | grep -P "\d+"
My phone number is 9818616136
Lab is going to end at 8:30
[root@localhost test1]# cat testfile | grep -P "\d{10}"
My phone number is 9818616136

-------

[root@localhost test1]# cat testfile 
I like Mangoes
I like Mango
Linux is not good at all
Its a very BUSY day
Weekends are NoT fun anymore
My phone number is 9818616136
Lab is going to end at 8:30

[root@localhost test1]# cat testfile | grep -i "mango"
I like Mangoes
I like Mango
[root@localhost test1]# cat testfile | grep -i "mango$" --> $ is used to see the ending
I like Mango
[root@localhost test1]# cat testfile | grep -i "^linux" --> ^ is used to see the strating
Linux is not good at all
[root@localhost test1]# cat testfile | grep  "^$"  ==> used to bring blank lines

[Aryaman]
[root@localhost test1]# cat testfile
I like Mangoes
I like Mango more
Linux is not good at all
Its a very BUSY day
Weekends are NoT fun anymore
My phone number is 9818616136
Lab is going to end at 8:30

[root@localhost test1]# cat testfile | grep -i -P "\bmango\b"
I like Mango more

Regex Practice: https://regexone.com/

14. sudo command
Used by sudoers in front of any privilged command like useradd, userdel



15. df command - reports disk usage by file systems
devtmpfs                   480760       0    480760   0% /dev
tmpfs                      497836       0    497836   0% /dev/shm
tmpfs                      497836    9276    488560   2% /run
tmpfs                      497836       0    497836   0% /sys/fs/cgroup
/dev/mapper/centos-root  17811456 4964340  12847116  28% /
/dev/sda1                 1038336  175632    862704  17% /boot
tmpfs 

16. du command
gives the space ocuupied by dir under which we are 
[root@localhost edac]# du -sh  (disk usage summarized in human readable format)
40K	


17. head command
displays the top 10 lines of a file

[root@localhost edac]# cat /etc/passwd | head
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
sync:x:5:0:sync:/sbin:/bin/sync
shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
halt:x:7:0:halt:/sbin:/sbin/halt
mail:x:8:12:mail:/var/spool/mail:/sbin/nologin
operator:x:11:0:operator:/root:/sbin/nologin


18. tail command
displays the bottom 10 lines of a file

[root@localhost edac]# cat /etc/passwd | tail
nfsnobody:x:65534:65534:Anonymous NFS User:/var/lib/nfs:/sbin/nologin
gnome-initial-setup:x:988:982::/run/gnome-initial-setup/:/sbin/nologin
sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin
avahi:x:70:70:Avahi mDNS/DNS-SD Stack:/var/run/avahi-daemon:/sbin/nologin
postfix:x:89:89::/var/spool/postfix:/sbin/nologin
tcpdump:x:72:72::/:/sbin/nologin
lavish:x:1000:1000:lavish:/home/lavish:/bin/bash
vipin:x:1001:1001::/home/vipin:/bin/bash
sonakshi:x:1002:1002::/home/sonakshi:/bin/bash
pratik:x:1003:1003::/home/pratik:/bin/bash

Extra 
-----
[root@localhost edac]# cat /etc/passwd | head -n2
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
[root@localhost edac]# cat /etc/passwd | tail -n2
sonakshi:x:1002:1002::/home/sonakshi:/bin/bash
pratik:x:1003:1003::/home/pratik:/bin/bash

19. diff command

[root@localhost edac]# diff file1 file2
10c10
< pratik:x:1003:1003::/home/pratik:/bin/bash
---
> pratik_ji:x:1003:1003::/home/pratik:/bin/bash


20. tar command
Used for compression/backups

tar -cvf test1.tar test1
compress it verboase and forcefully --> Here we are saying compress test1 to test1.tar
tar -cvf test1.tar test1

To extract --> tar -xf test1.tar

21. chmod command- it is used to chnage permissions
22. chown command - it is used to chnage ownership
23. jobs command
Jobs running on my linux box
[root@localhost test1]# sleep 20s &
[1] 62031
[root@localhost test1]# jobs
[1]+  Running                 sleep 20s &

24. kill command
kill -9 <process id>

25. useradd, userdel command



====================================================================
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Day-3   Theory
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
====================================================================


Changing permissions of all files in a directory
------------------------------------------------
[root@localhost test1]# chmod 755 *
[root@localhost test1]# ls -l
total 4
-rwxr-xr-x. 1 root root   0 May  8 10:53 file1
-rwxr-xr-x. 1 root root   0 May  8 10:53 file10
-rwxr-xr-x. 1 root root   0 May  8 10:53 file2
-rwxr-xr-x. 1 root root   0 May  8 10:53 file3
-rwxr-xr-x. 1 root root   0 May  8 10:53 file4
-rwxr-xr-x. 1 root root   0 May  8 10:53 file5
-rwxr-xr-x. 1 root root   0 May  8 10:53 file6
-rwxr-xr-x. 1 root root   0 May  8 10:53 file7
-rwxr-xr-x. 1 root root   0 May  8 10:53 file8
-rwxr-xr-x. 1 root root   0 May  8 10:53 file9
-rwxr-xr-x. 1 root root 166 May  7 20:01 testfile

Scripting
---------
Scripting in linux using bash is just execution of commands one after the other.

For example:
create a directory 'testdir'
5 files in this directory
set 755 as permissions of the file in this directory
then list all the files with permissions
chnage the permissions to 644
list all the files with modified permissions
delete all the files
----
[root@localhost scripts]# cat script1.sh 
#!/bin/bash

# First script for following operations

#create a directory 'testdir'
#5 files in this directory
#set 755 as permissions of the file in this directory
#then list all the files with permissions
#chnage the permissions to 644
#list all the files with modified permissions
#delete all the files

mkdir testdir
cd testdir
touch file{1..5}
chmod 755 *
ls -l
chmod 644 *
ls -l
rm -rf *

[Output]

[root@localhost scripts]# chmod +x script1.sh 
[root@localhost scripts]# ls 
script1.sh
[root@localhost scripts]# ls -l
total 4
-rwxr-xr-x. 1 root root 394 May  8 11:20 script1.sh
[root@localhost scripts]# ./script1.sh 
total 0
-rwxr-xr-x. 1 root root 0 May  8 11:22 file1
-rwxr-xr-x. 1 root root 0 May  8 11:22 file2
-rwxr-xr-x. 1 root root 0 May  8 11:22 file3
-rwxr-xr-x. 1 root root 0 May  8 11:22 file4
-rwxr-xr-x. 1 root root 0 May  8 11:22 file5
total 0
-rw-r--r--. 1 root root 0 May  8 11:22 file1
-rw-r--r--. 1 root root 0 May  8 11:22 file2
-rw-r--r--. 1 root root 0 May  8 11:22 file3
-rw-r--r--. 1 root root 0 May  8 11:22 file4
-rw-r--r--. 1 root root 0 May  8 11:22 file5

----
#Create a directory testdir
#Create 5 files under it with name as file1,file2...file5
#In every file enter the content as 
#file1 -> This is file1
#.
#.
#file5 -> This is file5

Script
------
#!/bin/bash

#Create a directory testdir
#Create 5 files under it with name as file1,file2...file5
#In every file enter the content as 
#file1 -> This is file1
#.
#.
#file5 -> This is file5

mkdir testdir
cd testdir
touch file{1..5}
for i in {1..5}
	do
		echo "This is file$i" > file$i
	done

Output
------
[root@localhost scripts]# ls
script1.sh  script2.sh  testdir
[root@localhost scripts]# cd testdir/
[root@localhost testdir]# ls
file1  file2  file3  file4  file5
[root@localhost testdir]# cat file1
This is file1
[root@localhost testdir]# cat file2
This is file2
[root@localhost testdir]# cat file3
This is file3
[root@localhost testdir]# cat file4
This is file4
[root@localhost testdir]# cat file5
This is file5

3. Script3

#Create a dir 'testdir'
#Create 100 directories inside it named - dir1,dir2...dir100
#Create 100 files - one file in each dir --> dir1 - file1, dir2 - file2.....dir100 - file100
#Now each file should have content as follows
#file1 - This is file1
#file2 - This is file2
#.
#.
#file100 - This is file 100

---
Script

#Create a dir 'testdir'
#Create 100 directories inside it named - dir1,dir2...dir100
#Create 100 files - one file in each dir --> dir1 - file1, dir2 - file2.....dir100 - file100
#Now each file should have content as follows
#file1 - This is file1
#file2 - This is file2
#.
#.
#file100 - This is file 100

mkdir testdir
cd testdir
mkdir dir{1..100}

for i in {1..100}
	do
		cd dir$i
		echo "This is file$i" > file$i
		cd ..
	done

Output

[root@localhost scripts]# cd testdir/
[root@localhost testdir]# ls
dir1    dir15  dir21  dir28  dir34  dir40  dir47  dir53  dir6   dir66  dir72  dir79  dir85  dir91  dir98
dir10   dir16  dir22  dir29  dir35  dir41  dir48  dir54  dir60  dir67  dir73  dir8   dir86  dir92  dir99
dir100  dir17  dir23  dir3   dir36  dir42  dir49  dir55  dir61  dir68  dir74  dir80  dir87  dir93
dir11   dir18  dir24  dir30  dir37  dir43  dir5   dir56  dir62  dir69  dir75  dir81  dir88  dir94
dir12   dir19  dir25  dir31  dir38  dir44  dir50  dir57  dir63  dir7   dir76  dir82  dir89  dir95
dir13   dir2   dir26  dir32  dir39  dir45  dir51  dir58  dir64  dir70  dir77  dir83  dir9   dir96
dir14   dir20  dir27  dir33  dir4   dir46  dir52  dir59  dir65  dir71  dir78  dir84  dir90  dir97
[root@localhost testdir]# cd dir39
[root@localhost dir39]# ls
file39
[root@localhost dir39]# cat file39
This is file39

-----------------------------
grep, cut, awk ,sed

grep is used to fetch a line on the basis of a pattern
------------------------------------------------------

Search for a single word

[root@localhost scripts]# cat /etc/passwd | grep "lavish"
lavish:x:1000:1000:lavish:/home/lavish:/bin/bash

Search for multiple words using Extended grep feature

[root@localhost scripts]# cat /etc/passwd | grep -E "(lavish|pratik|sonakshi)"
lavish:x:1000:1000:lavish:/home/lavish:/bin/bash
sonakshi:x:1002:1002::/home/sonakshi:/bin/bash
pratik:x:1003:1003::/home/pratik:/bin/bash

Inverse of grep
---------------
cat /etc/passwd | grep -v -E "(lavish|pratik|sonakshi)"
Inverse of grep - used to fetch all the lines where given pattern is not there.

Case insenstitve
----------------
lavish:x:1000:1000:lavish:/home/lavish:/bin/bash
[root@localhost scripts]# cat /etc/passwd | grep LAVISH
[root@localhost scripts]# cat /etc/passwd | grep -i LAVISH
lavish:x:1000:1000:lavish:/home/lavish:/bin/bash
[root@localhost scripts]# cat /etc/passwd | grep -i LaviSH
lavish:x:1000:1000:lavish:/home/lavish:/bin/bash



cut - is used to fetch the required field in the file 
-----------------------------------------------------
cut -d<delimeter> -f<field number>

Find all users and their shells
[root@localhost scripts]# cat /etc/passwd | cut -d':' -f1,7

All the users who are using bash shell
[root@localhost scripts]# cat /etc/passwd | cut -d':' -f1,7 | grep 'bash'
root:/bin/bash
lavish:/bin/bash
vipin:/bin/bash
sonakshi:/bin/bash
pratik:/bin/bash

To know the shell name 
[root@localhost scripts]# echo $SHELL
/bin/bash

List all the linux users with their USername,UID and Shell Name
List all the linux users with their USername,UID who are using bash shell

Give me the count of all the Linux users using bash shell
[root@localhost scripts]# cat /etc/passwd | grep "bash"| wc -l
5
[root@localhost scripts]# cat /etc/passwd | grep "bash"
root:x:0:0:root:/root:/bin/bash
lavish:x:1000:1000:lavish:/home/lavish:/bin/bash
vipin:x:1001:1001::/home/vipin:/bin/bash
sonakshi:x:1002:1002::/home/sonakshi:/bin/bash
pratik:x:1003:1003::/home/pratik:/bin/bash

'awk'
-----

cut -d'<delimeter>'  -f1,7
awk -F'<field separator>' '{print $1,$7}'

Print all users using bash via awk
[root@localhost scripts]# cat /etc/passwd | awk -F':' '{print $1,$7}' | grep bash
root /bin/bash
lavish /bin/bash
vipin /bin/bash
sonakshi /bin/bash
pratik /bin/bash

To call all the fields
----------------------
root:x:0:0:root:/root:/bin/bash
lavish:x:1000:1000:lavish:/home/lavish:/bin/bash
vipin:x:1001:1001::/home/vipin:/bin/bash
sonakshi:x:1002:1002::/home/sonakshi:/bin/bash
pratik:x:1003:1003::/home/pratik:/bin/bash

Using 'awk' print all the users and their shells whose UID > 999
----------------------------------------------------------------
cat /etc/passwd | awk -F':' '{if ($3 > 999) print $1,$7}'

This command means when field separator is ":" then check the following:
$3> 999 means if userid is greater than 999 (userid is in /etc/passwd)
when your if condiftion is satisfied, printing happens
we are priniting $1 and $7 here
As per /etc/passwd - $1 is username & $7 is Shell name

cat /etc/passwd | awk -F':' '{if ($3 > 999) print $1,$7}'
nfsnobody /sbin/nologin
lavish /bin/bash
vipin /bin/bash
sonakshi /bin/bash
pratik /bin/bash

Practice
--------
Bash scripting practice website - https://ryanstutorials.net/bash-scripting-tutorial/

If I want to print the output of a command in a variable then synatx is:
var=$(<command>)



Scripting question
------------------
Write a script where user enters a username and outputs says if that user is present on linux bo or not
--
[root@localhost scripts]# cat script4.sh 
#!/bin/bash

#Write a script where user enters a username and outputs says if that user is present on linux bo or not

read -p "Enter username: " usrname

#To check if the user is on system or not

var=$(cat /etc/passwd | grep "$usrname")

if [[ -n $var ]]
	then
		echo "User - $usrname  is present on the system"
	else
		echo "User does not exists"
fi
--
Write a script where user enters a file path and output says if input path is a file or a directroy
Write a script where username is entered and its userid is displayed in the output




===============================================
LAb Day -3
--------------------


Usecase for permissions
-----------------------
drwxr-xr-x. 2 root root 6 May  8 18:06 dir1 (755)

Case1 - If I create 2 files in this dir1 - would they get 755?
No - it depends on umask 

[root@localhost dir1]# touch file{1..2}
[root@localhost dir1]# ls -l
total 0
-rw-r--r--. 1 root root 0 May  8 18:08 file1
-rw-r--r--. 1 root root 0 May  8 18:08 file2

Case2 - I give recursive permission of 766 to this dir1 (chmod -R 766 dir1)
[root@localhost testdir]# chmod -R 766 dir1
[root@localhost testdir]# ls -l
total 0
drwxrw-rw-. 2 root root 32 May  8 18:08 dir1

What would be the permissions of file1 and file2 now?
permissions get chnaged to 766
[root@localhost dir1]# ls -l
total 0
-rwxrw-rw-. 1 root root 0 May  8 18:08 file1
-rwxrw-rw-. 1 root root 0 May  8 18:08 file2

Case3 - If I now create file3 and file4 under dir1? what would be the theor permissions?
[root@localhost dir1]# ls -l
total 0
-rwxrw-rw-. 1 root root 0 May  8 18:08 file1
-rwxrw-rw-. 1 root root 0 May  8 18:08 file2
-rw-r--r--. 1 root root 0 May  8 18:14 file3
-rw-r--r--. 1 root root 0 May  8 18:14 file4

Conclusion: Recursion applies to existing files only.
---------------------------------------------------------------------------------------
Script to take a sentence and print 2nd word of it

[root@localhost scripts]# ./script5.sh 
Enter you sentence: Linux OS is nice to know
Your sentence is as follows -- Linux OS is nice to know
Second word of you sentence is:

OS
[root@localhost scripts]# cat script5.sh 
#!/bin/bash

read -p "Enter you sentence: " sent
echo "Your sentence is as follows -- $sent"
echo "Second word of you sentence is:"
echo ""
echo "$sent" | cut -d' ' -f2
---------------------------------------------------------------------------------------

[IBM] Give me a count of all the users(users who have uid > 999) in my linux box after every 4 hrs?

cat /etc/passwd | awk -F':' '{if ($3 > 999) print $1}'

Here you are doing SCHEDULING - > In Linux it is called 'CRON' Job

# Example of job definition:
# .---------------- minute (0 - 59)
# |  .------------- hour (0 - 23)
# |  |  .---------- day of month (1 - 31)
# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
# |  |  |  |  |
# *  *  *  *  * user-name  command to be executed
  *  4  *  *  * 'command'

--------------------------
Run calender command everyday at 7:06 pm
6  19  *  *  * /bin/cal > /dev/pts/0
--------------------------

Change Shells for users
-----------------------
<this is general info of users with id > 999

[root@localhost scripts]# cat /etc/passwd | awk -F':' '{if ($3 > 999) print $0}'
nfsnobody:x:65534:65534:Anonymous NFS User:/var/lib/nfs:/sbin/nologin
lavish:x:1000:1000:lavish:/home/lavish:/bin/bash
vipin:x:1001:1001::/home/vipin:/bin/bash
sonakshi:x:1002:1002::/home/sonakshi:/bin/bash
pratik:x:1003:1003::/home/pratik:/bin/bash

<Since lavish had bash shell, he was to login>
[root@localhost scripts]# su - lavish
Last login: Thu May  6 17:29:31 IST 2021 on :0
[lavish@localhost ~]$ exit
logout

<This is where the shell is modified for the user lavish>
[root@localhost scripts]# usermod -s /sbin/nologin lavish
[root@localhost scripts]# su - lavish
Last login: Sat May  8 19:17:31 IST 2021 on pts/0
This account is currently not available.
<after modification account is locked>
------------------------------------------------------------------------

file1
-------
lavish
vipin
sonakshi
pratik
vishesh
ronak
vikas
shrishti

I give you this file - and ask you to tell me which are the 'working' users in your organisation out of this list?
[root@localhost scripts]# echo $var

[root@localhost scripts]# cat checkvalidusers.sh 
#!/bin/bash

while read line

	do

	var=$(cat /etc/passwd | awk -F':' '{if ($3 > 999) print $0}' | grep bash | grep "$line")
	if [[ -n $var ]]
		then
			echo "User $line exists on the system and is a working user user with bash shell "
		else
			echo "User $line is not a valid user on this system"
	fi

	done < userfile
--------------------





====================================================================
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Day-4   Theory
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
====================================================================


			[SCRIPTING FUNDAMENTALS CONTINUED...]

Assignment Q - Tell me which are the world writable files on my Linux system - and then make them world readable.
----
Print those sentences from userfile which have words from data and tell which words from data do NOT exist in userfile.

[root@localhost testdir]# cat data
Sun  cat userfile | grep "Sun"
Moon cat userfile | grep "Moon"
India
Aladin
Bagheera
Tesla
Money
Virat
Messy
Doremon
Moti
Anormous
COVID
radhey

[root@localhost testdir]# cat userfile 
COVID is spreading
Aladin is a myth
Moon is satellite
Bagheera is me
Messy is amazing
radhey bhai
Sun is a star
Tesla is a hero
India is suffering

Script
--
#!/bin/bash

#Print those sentences from userfile which have words from data and tell which words from data do NOT exist i userfile.

#while loop

while read line

 do
  var=$(cat userfile | grep "$line")
   if [[ -n $var  ]]
    then
	echo "$var"
    else
	echo "$line does not exist"
   fi

 done < data
--

[Shubham] ques is - if we have the files in different locations rather than in same dir ?
Ans - Please use absolute paths


-------
[root@localhost testdir]# cat userfile 
COVID is spreading
Aladin is a myth

Moon is satellite
Bagheera is me

Messy is amazing
radhey bhai
Sun is a star
Tesla is a hero
India is suffering

[root@localhost testdir]# cat userfile | grep "^$"



[root@localhost testdir]# cat userfile | grep -v "^$"
COVID is spreading
Aladin is a myth
Moon is satellite
Bagheera is me
Messy is amazing
radhey bhai
Sun is a star
Tesla is a hero
India is suffering
-----------------------------------------------------------------------------

Unique Values
-------------
Sun is star
Sun is star
Moon
India
Aladin
Bagheera
Tesla
Money
Virat
Messy
Doremon
Moti
Anormous
COVID
radhey
[root@localhost testdir]# cat data | uniq
Sun is star
Moon
India
Aladin
Bagheera
Tesla
Money
Virat
Messy
Doremon
Moti
Anormous
COVID
radhey
-------------------------------------------------------
Web Crawling

To find domain names 

curl -s  "https://www.paltalk.com/" | grep -o -P "\w+\.\w+(\.\w+)?" | grep  -E "(\.com$|\.org$|\.in$|\.edu$|\.net$)" | sort | uniq






===============================================
LAb Day -4
--------------------


Exit Status of command
----------------------
Can be checked via echo $?
0 --> previous command ran successfully
1 --> previous command failed

---
[root@localhost testdir]# var=$(cat userfile | grep "Sun")
[root@localhost testdir]# echo $?
0
[root@localhost testdir]# var=$(ct userfile | grep "Sun")
bash: ct: command not found...
Similar command is: 'tc'
[root@localhost testdir]# echo $?
1
---

Run levels in Linux
-------------------
0 - halting the system/shutdown
1 - single user mode
2 - multi user mode without networking
3 - multi user without graphics
4 - dev purpose
5 - multi user mode with networking and graphics
6 - restart

How to change the runlevels?
init <runlevel number>

alias ls='init 0'

SSHpass to fire commands on other systems
-----------------------------------------
root@ubuntu:~# sshpass -p root ssh -o StrictHostKeyChecking=no root@192.168.91.131 'init 6'
<on system 1>                                                  <rootuser on other system>

Copy he file from one system to another system
----------------------------------------------
192.168.91.131 & 192.168.91.132

from M1#scp <what u wanna copy from one machine> userofM2@IPofM2:<location of M2>

root@ubuntu:~/dirmachine2# scp * root@192.168.91.131:/root/edac/testdir
root@192.168.91.131's password: 
file1                                                                   100%    0     0.0KB/s   00:00    
file2                                                                   100%    0     0.0KB/s   00:00    
file3                                                                   100%    0     0.0KB/s   00:00    
file4                                                                   100%    0     0.0KB/s   00:00    
file5                                                                   100%    0     0.0KB/s   00:00   

awk for pattern search
----------------------
cat filename | awk '/<pattern>/ { print $1, $2 }' ---> https://www3.physnet.uni-hamburg.de/physnet/Tru64-Unix/HTML/APS32DTE/WKXXXXXX.HTM#:~:text=%24%20awk%20'%2F%5BGg%5Dunther%2F,print%20%241%2C%20%242%20%7D'%20infile&text=It%20then%20reads%20the%20first,it%20performs%20the%20associated%20action.

cat /etc/passwd | awk '/$usr/ { print $1, $2 }' 

Cron service - used for scheduling
-----------------------------------
m h dom mon dow  command
22 4 3 2 4 command




====================================================================
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Day-5   Theory
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
====================================================================



[Troubleshooting of doubts]

Scenario based ques
-------------------
As user root
1. i create a user 'user1'
2. cd /home/user1 and creates a file - 'file1' with hello as content & permission as 644
3. Switches the user to 'user1'
4. user1 tries to edit the 'file1' using echo in his home
Q1 - will he be able to do that?
Q2 - He tries to edit using 'vi' - will he be able to change content now?

Summary - if root creates a file in some user's home dir and user makes chnages to it using vi and forcefully (:wq!) saves the changes, then ownership changes from root to that user itself.

But if root creates some dir in the home of that user and then creates files inside that dir, and user makes chnages to it using vi and forcefully (:wq!) saves the changes - then it's not allowed.

Changing just the group ownership
---------------------------------
[root@localhost ~]# man chown
[root@localhost ~]# ls -l /home/abhi/file1
-rwxrwxr-x. 1 root abhi 0 May 11 08:25 /home/abhi/file1
[root@localhost ~]# chown :root /home/abhi/file1
[root@localhost ~]# ls -l /home/abhi/file1
-rwxrwxr-x. 1 root root 0 May 11 08:25 /home/abhi/file1
[root@localhost ~]# 


ACL practical
-------------
[root@localhost test]# setfacl -m u:abhi:rwx file1
[root@localhost test]# ls -l
total 0
-rw-rwxr--+ 1 root root 0 May 11 09:08 file1
-rw-r--r--. 1 root root 0 May 11 09:08 file10
-rw-r--r--. 1 root root 0 May 11 09:08 file2
-rw-r--r--. 1 root root 0 May 11 09:08 file3
-rw-r--r--. 1 root root 0 May 11 09:08 file4
-rw-r--r--. 1 root root 0 May 11 09:08 file5
-rw-r--r--. 1 root root 0 May 11 09:08 file6
-rw-r--r--. 1 root root 0 May 11 09:08 file7
-rw-r--r--. 1 root root 0 May 11 09:08 file8
-rw-r--r--. 1 root root 0 May 11 09:08 file9
[root@localhost test]# getfacl file1
# file: file1
# owner: root
# group: root
user::rw-
user:abhi:rwx
group::r--
mask::rwx
other::r--

Verification
--
[tom@localhost test]$ su - abhi
Password: 
Last login: Tue May 11 09:08:56 IST 2021 on pts/0
[abhi@localhost ~]$ cd /tmp/test/
[abhi@localhost test]$ ls
file1  file10  file2  file3  file4  file5  file6  file7  file8  file9
[abhi@localhost test]$ echo "data" > file1
[abhi@localhost test]$ su - tom
Password: 
Last login: Tue May 11 09:10:22 IST 2021 on pts/0
[tom@localhost ~]$ cd /tmp/test/
[tom@localhost test]$ echo "data" > file1
-bash: file1: Permission denied
--

Sed command usage
-----------------
[root@localhost test]# cat file1
database is enetered in to this file
the processed info is called database
we are going to analyse the database today
[root@localhost test]# sed 's|.*database|data|g' file1
data is enetered in to this file
data
data today
---

[root@localhost test]# cat file1
database is enetered in to this database file
the processed info is called database
we are going to analyse the database today

[root@localhost test]# sed 's/database/somename/g' file1
somename is enetered in to this somename file
the processed info is called somename
we are going to analyse the somename today

---
[root@localhost test]# cat file1
database is enetered in to this database file
the processed info is called database
we are going to analyse the database today

[root@localhost test]# sed 's|file|file\n|' file1
database is enetered in to this database file

the processed info is called database
we are going to analyse the database today
[root@localhost test]# sed 's|file|file\nthis is my new line|' file1
database is enetered in to this database file
this is my new line
the processed info is called database
we are going to analyse the database today

-----



====================================================================
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Day-6   Theory
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
====================================================================

Pstree command - used show process hierarchy
--------------------------------------------

[root@localhost edac]# pstree
systemd─┬─ModemManager───2*[{ModemManager}]
        ├─NetworkManager───2*[{NetworkManager}]
        ├─VGAuthService
        ├─abrt-watch-log
        ├─abrtd
        ├─accounts-daemon───2*[{accounts-daemon}]
        ├─alsactl
        ├─at-spi-bus-laun─┬─dbus-daemon───{dbus-daemon}
        │                 └─3*[{at-spi-bus-laun}]
        ├─at-spi2-registr───2*[{at-spi2-registr}]
        ├─atd
        ├─auditd─┬─audispd─┬─sedispatch
        │        │         └─{audispd}
        │        └─{auditd}
        ├─avahi-daemon───avahi-daemon
        ├─bluetoothd
        ├─boltd───2*[{boltd}]
        ├─chronyd
        ├─colord───2*[{colord}]
        ├─crond
        ├─cupsd
        ├─2*[dbus-daemon───{dbus-daemon}]
        ├─dbus-launch
        ├─dconf-service───2*[{dconf-service}]
        ├─dhclient
        ├─dnsmasq───dnsmasq
        ├─evolution-addre─┬─evolution-addre───5*[{evolution-addre}]
        │                 └─4*[{evolution-addre}]
        ├─evolution-calen─┬─evolution-calen───9*[{evolution-calen}]
        │                 └─4*[{evolution-calen}]
        ├─evolution-sourc───3*[{evolution-sourc}]
        ├─firewalld───{firewalld}
        ├─fwupd───4*[{fwupd}]
        ├─gconfd-2
        ├─gdm─┬─X───{X}
        │     ├─gdm-session-wor─┬─gnome-session-b─┬─abrt-applet───2*[{abrt-applet}]
        │     │                 │                 ├─evolution-alarm───5*[{evolution-alarm}]
        │     │                 │                 ├─gnome-shell─┬─ibus-daemon─┬─ibus-dconf───3*[{ibus-dconf}]
        │     │                 │                 │             │             ├─ibus-engine-sim───2*[{ibus-en+
        │     │                 │                 │             │             └─2*[{ibus-daemon}]
        │     │                 │                 │             └─9*[{gnome-shell}]
        │     │                 │                 ├─gnome-software───3*[{gnome-software}]
        │     │                 │                 ├─gsd-a11y-settin───3*[{gsd-a11y-settin}]
        │     │                 │                 ├─gsd-account───3*[{gsd-account}]
        │     │                 │                 ├─gsd-clipboard───2*[{gsd-clipboard}]
        │     │                 │                 ├─gsd-color───3*[{gsd-color}]
        │     │                 │                 ├─gsd-datetime───3*[{gsd-datetime}]
        │     │                 │                 ├─gsd-disk-utilit───2*[{gsd-disk-utilit}]
        │     │                 │                 ├─gsd-housekeepin───3*[{gsd-housekeepin}]
        │     │                 │                 ├─gsd-keyboard───3*[{gsd-keyboard}]
        │     │                 │                 ├─gsd-media-keys───3*[{gsd-media-keys}]
        │     │                 │                 ├─gsd-mouse───3*[{gsd-mouse}]
        │     │                 │                 ├─gsd-power───3*[{gsd-power}]
        │     │                 │                 ├─gsd-print-notif───2*[{gsd-print-notif}]
        │     │                 │                 ├─gsd-rfkill───2*[{gsd-rfkill}]
        │     │                 │                 ├─gsd-screensaver───2*[{gsd-screensaver}]
        │     │                 │                 ├─gsd-sharing───3*[{gsd-sharing}]
        │     │                 │                 ├─gsd-smartcard───4*[{gsd-smartcard}]
        │     │                 │                 ├─gsd-sound───3*[{gsd-sound}]
        │     │                 │                 ├─gsd-wacom───2*[{gsd-wacom}]
        │     │                 │                 ├─gsd-xsettings───3*[{gsd-xsettings}]
        │     │                 │                 ├─nautilus-deskto───3*[{nautilus-deskto}]
        │     │                 │                 ├─seapplet
        │     │                 │                 ├─ssh-agent
        │     │                 │                 ├─tracker-extract───13*[{tracker-extract}]
        │     │                 │                 ├─tracker-miner-a───3*[{tracker-miner-a}]
        │     │                 │                 ├─tracker-miner-f───3*[{tracker-miner-f}]
        │     │                 │                 ├─tracker-miner-u───3*[{tracker-miner-u}]
        │     │                 │                 └─3*[{gnome-session-b}]
        │     │                 └─2*[{gdm-session-wor}]
        │     └─3*[{gdm}]
        ├─gnome-keyring-d───3*[{gnome-keyring-d}]
        ├─gnome-shell-cal───5*[{gnome-shell-cal}]
        ├─gnome-terminal-─┬─bash───su───bash───su───bash───su───bash───su───bash───su───bash───su───bash───su+++
        │                 ├─bash───su───bash───su───bash───su───bash───su───bash───pstree
        │                 ├─gnome-pty-helpe
        │                 └─3*[{gnome-terminal-}]
        ├─goa-daemon───3*[{goa-daemon}]
        ├─goa-identity-se───3*[{goa-identity-se}]
        ├─gsd-printer───2*[{gsd-printer}]
        ├─gssproxy───5*[{gssproxy}]
        ├─gvfs-afc-volume───3*[{gvfs-afc-volume}]
        ├─gvfs-goa-volume───2*[{gvfs-goa-volume}]
        ├─gvfs-gphoto2-vo───2*[{gvfs-gphoto2-vo}]
        ├─gvfs-mtp-volume───2*[{gvfs-mtp-volume}]
        ├─gvfs-udisks2-vo───2*[{gvfs-udisks2-vo}]
        ├─gvfsd─┬─gvfsd-burn───2*[{gvfsd-burn}]
        │       ├─gvfsd-trash───2*[{gvfsd-trash}]
        │       └─2*[{gvfsd}]
        ├─gvfsd-fuse───5*[{gvfsd-fuse}]
        ├─gvfsd-metadata───2*[{gvfsd-metadata}]
        ├─ibus-portal───2*[{ibus-portal}]
        ├─ibus-x11───2*[{ibus-x11}]
        ├─imsettings-daem───3*[{imsettings-daem}]
        ├─ksmtuned───sleep
        ├─libvirtd───16*[{libvirtd}]
        ├─lsmd
        ├─lvmetad
        ├─master─┬─pickup
        │        └─qmgr
        ├─mission-control───3*[{mission-control}]
        ├─packagekitd───2*[{packagekitd}]
        ├─polkitd───6*[{polkitd}]
        ├─pulseaudio───2*[{pulseaudio}]
        ├─rngd
        ├─rpcbind
        ├─rsyslogd───2*[{rsyslogd}]
        ├─rtkit-daemon───2*[{rtkit-daemon}]
        ├─smartd
        ├─sshd
        ├─systemd-journal
        ├─systemd-logind
        ├─systemd-udevd───systemd-udevd
        ├─tracker-store───7*[{tracker-store}]
        ├─tuned───4*[{tuned}]
        ├─udisksd───4*[{udisksd}]
        ├─upowerd───2*[{upowerd}]
        ├─vmtoolsd───2*[{vmtoolsd}]
        ├─vmtoolsd───3*[{vmtoolsd}]
        ├─wpa_supplicant
        └─xdg-permission-───2*[{xdg-permission-}]

To see the Process id on the basis of process name
--------------------------------------------------
[root@localhost edac]# pidof systemd
1
[root@localhost edac]# pidof auditd
689

Waiting of processes
--------------------------------------------

Case1 - Here second process did not have to wait for long because first got executed quickly and exited, so that second process could take up the space
[root@localhost edac]# touch file_x;cat file
tiger bear
elephant tiger bear
bear
aaadbfdjb
aafbvj
afdnjfd
aaa1234dbjr
cdb
[root@localhost edac]# ls
file  file_x

Case2 - Here second process ad to wait for 20s in order to get executed.
[root@localhost edac]# sleep 20s ;cat file
tiger bear
elephant tiger bear
bear
aaadbfdjb
aafbvj
afdnjfd
aaa1234dbjr
cdb

------------------------------------------------------------------------
[root@localhost edac]# sleep 20s & (sent the sleep process to background)
[1] 80631
[root@localhost edac]# cat file (since the sleep process was in bg, i could run the next process since the previous one freed up the terminal)
tiger bear
elephant tiger bear
bear
aaadbfdjb
aafbvj
afdnjfd
aaa1234dbjr
cdb
[root@localhost edac]# jobs (to see the job running in bg)
[1]+  Running                 sleep 20s &
[root@localhost edac]# fg %1 (Here we brought the bg process to foreground)
sleep 20s

Killing a process running in background
---------------------------------------
[root@localhost edac]# sleep 100s &
[1] 81023
[root@localhost edac]# jobs
[1]+  Running                 sleep 100s &
[root@localhost edac]# ps -elf | grep sleep
0 S root      81021    853  0  80   0 - 27013 hrtime 08:50 ?        00:00:00 sleep 60
0 S root      81023  80253  0  80   0 - 27013 hrtime 08:51 pts/1    00:00:00 sleep 100s
0 R root      81025  80253  0  80   0 - 28202 -      08:51 pts/1    00:00:00 grep --color=auto sleep
[root@localhost edac]# kill -9 81023
[root@localhost edac]# jobs
[1]+  Killed                  sleep 100s

Start the firefox and interrupt it in 10s
-----------------------------------------
lavish@ubuntu:~$ timeout 10s firefox &
[1] 79759

Signals or interrupts to the process
------------------------------------
[root@localhost edac]# kill -l
 1) SIGHUP	 2) SIGINT	 3) SIGQUIT	 4) SIGILL	 5) SIGTRAP
 6) SIGABRT	 7) SIGBUS	 8) SIGFPE	 9) SIGKILL	10) SIGUSR1
11) SIGSEGV	12) SIGUSR2	13) SIGPIPE	14) SIGALRM	15) SIGTERM
16) SIGSTKFLT	17) SIGCHLD	18) SIGCONT	19) SIGSTOP	20) SIGTSTP
21) SIGTTIN	22) SIGTTOU	23) SIGURG	24) SIGXCPU	25) SIGXFSZ
26) SIGVTALRM	27) SIGPROF	28) SIGWINCH	29) SIGIO	30) SIGPWR
31) SIGSYS	34) SIGRTMIN	35) SIGRTMIN+1	36) SIGRTMIN+2	37) SIGRTMIN+3
38) SIGRTMIN+4	39) SIGRTMIN+5	40) SIGRTMIN+6	41) SIGRTMIN+7	42) SIGRTMIN+8
43) SIGRTMIN+9	44) SIGRTMIN+10	45) SIGRTMIN+11	46) SIGRTMIN+12	47) SIGRTMIN+13
48) SIGRTMIN+14	49) SIGRTMIN+15	50) SIGRTMAX-14	51) SIGRTMAX-13	52) SIGRTMAX-12
53) SIGRTMAX-11	54) SIGRTMAX-10	55) SIGRTMAX-9	56) SIGRTMAX-8	57) SIGRTMAX-7
58) SIGRTMAX-6	59) SIGRTMAX-5	60) SIGRTMAX-4	61) SIGRTMAX-3	62) SIGRTMAX-2
63) SIGRTMAX-1	64) SIGRTMAX	

kill -<signal ID> PID

Process states and signals --> https://cloudchef.medium.com/linux-process-states-and-signals-a967d18fab64



================================================
Fork question 
===============================
1. Calculate number of times hello is printed:

#include <stdio.h> 
#include <sys/types.h> 
int main() 
{ 
    fork(); 
    fork(); 
    fork(); 
    printf("hello\n"); 
    return 0; 
} 

2. Predict the Output of the following program:.

#include <stdio.h> 
#include <sys/types.h> 
#include <unistd.h> 
int main() 
{ 
  
    // make two process which run same 
    // program after this instruction 
    fork(); 
  
    printf("Hello world!\n"); 
    return 0; 
} 

3. for (i = 0; i < n; i++) fork();

The total number of child processes created is
(A) n
(B) 2n - 1
(C) 2n
(D) 2(n+1) - 1

Hint: The total number of process created are (number of child processes)+1


======================
Answer
----------------------

1. 
hello
hello
hello
hello
hello
hello
hello
hello

The number of times ‘hello’ is printed is equal to number of process created. Total Number of Processes = 2^n, where n is number of fork system calls. So here n = 3, 2^3 = 8

fork ();   // Line 1
fork ();   // Line 2
fork ();   // Line 3

       L1       // There will be 1 child process 
    /     \     // created by line 1.
  L2      L2    // There will be 2 child processes
 /  \    /  \   //  created by line 2
L3  L3  L3  L3  // There will be 4 child processes 
                // created by line 3
-------------------------------
So there are total eight processes (new child processes and one original process).

If we want to represent the relationship between the processes as a tree hierarchy it would be the following:

The main process: P0
Processes created by the 1st fork: P1
Processes created by the 2nd fork: P2, P3
Processes created by the 3rd fork: P4, P5, P6, P7

             P0
         /   |   \
       P1    P4   P2
      /  \          \
    P3    P6         P5
   /
 P7
--------------------------------

2. 
Hello world!
Hello world!

3. 
B



